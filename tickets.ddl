-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-08-19 15:15:21 CEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



DROP TABLE address CASCADE CONSTRAINTS;

DROP TABLE balise CASCADE CONSTRAINTS;

DROP TABLE balise_group CASCADE CONSTRAINTS;

DROP TABLE balise_group_type CASCADE CONSTRAINTS;

DROP TABLE balise_telegram CASCADE CONSTRAINTS;

DROP TABLE bg_type_bg CASCADE CONSTRAINTS;

DROP TABLE carrier CASCADE CONSTRAINTS;

DROP TABLE cause CASCADE CONSTRAINTS;

DROP TABLE change_log CASCADE CONSTRAINTS;

DROP TABLE "comment" CASCADE CONSTRAINTS;

DROP TABLE comment_reference_type CASCADE CONSTRAINTS;

DROP TABLE comment_relationship CASCADE CONSTRAINTS;

DROP TABLE contact CASCADE CONSTRAINTS;

DROP TABLE conversation CASCADE CONSTRAINTS;

DROP TABLE department CASCADE CONSTRAINTS;

DROP TABLE department_address CASCADE CONSTRAINTS;

DROP TABLE email CASCADE CONSTRAINTS;

DROP TABLE emp_ticket_assigned CASCADE CONSTRAINTS;

DROP TABLE employee CASCADE CONSTRAINTS;

DROP TABLE event CASCADE CONSTRAINTS;

DROP TABLE event_type CASCADE CONSTRAINTS;

DROP TABLE feature CASCADE CONSTRAINTS;

DROP TABLE feature_incident CASCADE CONSTRAINTS;

DROP TABLE feature_type CASCADE CONSTRAINTS;

DROP TABLE inc_type_inc CASCADE CONSTRAINTS;

DROP TABLE incident CASCADE CONSTRAINTS;

DROP TABLE incident_bg CASCADE CONSTRAINTS;

DROP TABLE incident_cause CASCADE CONSTRAINTS;

DROP TABLE incident_event CASCADE CONSTRAINTS;

DROP TABLE incident_location CASCADE CONSTRAINTS;

DROP TABLE incident_rbc CASCADE CONSTRAINTS;

DROP TABLE incident_reference_type CASCADE CONSTRAINTS;

DROP TABLE incident_relationship CASCADE CONSTRAINTS;

DROP TABLE incident_train CASCADE CONSTRAINTS;

DROP TABLE incident_type CASCADE CONSTRAINTS;

DROP TABLE job_position CASCADE CONSTRAINTS;

DROP TABLE kmc CASCADE CONSTRAINTS;

DROP TABLE leg CASCADE CONSTRAINTS;

DROP TABLE line CASCADE CONSTRAINTS;

DROP TABLE line_leg CASCADE CONSTRAINTS;

DROP TABLE line_type CASCADE CONSTRAINTS;

DROP TABLE location CASCADE CONSTRAINTS;

DROP TABLE location_train CASCADE CONSTRAINTS;

DROP TABLE log CASCADE CONSTRAINTS;

DROP TABLE log_incident CASCADE CONSTRAINTS;

DROP TABLE mileage_discontinuity CASCADE CONSTRAINTS;

DROP TABLE mounting_system CASCADE CONSTRAINTS;

DROP TABLE obu CASCADE CONSTRAINTS;

DROP TABLE obu_sim CASCADE CONSTRAINTS;

DROP TABLE obu_vehicle CASCADE CONSTRAINTS;

DROP TABLE organization CASCADE CONSTRAINTS;

DROP TABLE rbc CASCADE CONSTRAINTS;

DROP TABLE rbc_bg CASCADE CONSTRAINTS;

DROP TABLE rbc_obu CASCADE CONSTRAINTS;

DROP TABLE scr_rec_inc CASCADE CONSTRAINTS;

DROP TABLE screen_recording CASCADE CONSTRAINTS;

DROP TABLE sim CASCADE CONSTRAINTS;

DROP TABLE station CASCADE CONSTRAINTS;

DROP TABLE station_state CASCADE CONSTRAINTS;

DROP TABLE station_type CASCADE CONSTRAINTS;

DROP TABLE structured_address CASCADE CONSTRAINTS;

DROP TABLE tckt_conv CASCADE CONSTRAINTS;

DROP TABLE tckt_tckt_state CASCADE CONSTRAINTS;

DROP TABLE telegram CASCADE CONSTRAINTS;

DROP TABLE telegram_type CASCADE CONSTRAINTS;

DROP TABLE ticket CASCADE CONSTRAINTS;

DROP TABLE ticket_email CASCADE CONSTRAINTS;

DROP TABLE ticket_incident CASCADE CONSTRAINTS;

DROP TABLE ticket_reference_type CASCADE CONSTRAINTS;

DROP TABLE ticket_relationship CASCADE CONSTRAINTS;

DROP TABLE ticket_state CASCADE CONSTRAINTS;

DROP TABLE tlg_type_tlg CASCADE CONSTRAINTS;

DROP TABLE track_number CASCADE CONSTRAINTS;

DROP TABLE train CASCADE CONSTRAINTS;

DROP TABLE vehicle CASCADE CONSTRAINTS;

DROP TABLE vehicle_incident CASCADE CONSTRAINTS;

DROP TABLE vehicle_remark CASCADE CONSTRAINTS;

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE address (
    id      NUMBER NOT NULL,
    address VARCHAR2(256 CHAR) NOT NULL,
    remark  VARCHAR2(256 CHAR)
);

COMMENT ON COLUMN address.address IS
    'full address text, associate structured_address record with this address record to store individual address fields separately';

ALTER TABLE address ADD CONSTRAINT address_pk PRIMARY KEY ( id );

CREATE TABLE balise (
    feature_id         NUMBER NOT NULL,
    n_pig              NUMBER(1) DEFAULT 0 NOT NULL,
    fixed              NUMBER(1) DEFAULT 1 NOT NULL,
    mounting_system_id NUMBER,
    balise_group_id    NUMBER NOT NULL
);

ALTER TABLE balise ADD CHECK ( n_pig BETWEEN 0 AND 7 );

ALTER TABLE balise ADD CONSTRAINT balise_pk PRIMARY KEY ( feature_id );

CREATE TABLE balise_group (
    id     NUMBER NOT NULL,
    nid_c  NUMBER(4) NOT NULL,
    nid_bg NUMBER(5) NOT NULL
);

ALTER TABLE balise_group ADD CHECK ( nid_c BETWEEN 0 AND 1023 );

ALTER TABLE balise_group ADD CHECK ( nid_bg BETWEEN 0 AND 16382 );

COMMENT ON TABLE balise_group IS
    'nid_c and nid_bg combination declared as unique constraints - this requirement holds for standard operation and incidents database will not track balises which are not deployed in the field
separate id as primary key is used to avoid the use of a composite primary key';

COMMENT ON COLUMN balise_group.nid_bg IS
    '16383 - Identity is unknown (only to be used for Linking information)';

ALTER TABLE balise_group ADD CONSTRAINT balise_group_pk PRIMARY KEY ( id );

ALTER TABLE balise_group ADD CONSTRAINT balise_group_nid_c_nid_bg_un UNIQUE ( nid_c,
                                                                              nid_bg );

CREATE TABLE balise_group_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(8 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

COMMENT ON COLUMN balise_group_type.name IS
    'e.g. P, AN, HOV';

COMMENT ON COLUMN balise_group_type.description IS
    'description of a function of the BG, e.g. used as HO location';

ALTER TABLE balise_group_type ADD CONSTRAINT balise_group_type_pk PRIMARY KEY ( id );

ALTER TABLE balise_group_type ADD CONSTRAINT balise_group_type_name_un UNIQUE ( name );

CREATE TABLE balise_telegram (
    balise_id3          NUMBER NOT NULL,
    telegram_id         NUMBER NOT NULL,
    uploaded            DATE,
    upload_not_recorded NUMBER(1) NOT NULL
);

ALTER TABLE balise_telegram ADD CONSTRAINT balise_telegram_pk PRIMARY KEY ( balise_id3,
                                                                            telegram_id );

CREATE TABLE bg_type_bg (
    balise_group_type_id NUMBER NOT NULL,
    balise_group_id      NUMBER NOT NULL,
    primary_type         NUMBER(1) DEFAULT 1 NOT NULL
);

ALTER TABLE bg_type_bg ADD CONSTRAINT bg_type_bg_pk PRIMARY KEY ( balise_group_type_id,
                                                                  balise_group_id );

CREATE TABLE carrier (
    department_id NUMBER NOT NULL
);

COMMENT ON TABLE carrier IS
    'used as a subtype (polymorph variant) of department, that can be asssigned to a train as its carrier';

COMMENT ON COLUMN carrier.department_id IS
    'FK from deprtment table as PK';

ALTER TABLE carrier ADD CONSTRAINT carrier_pk PRIMARY KEY ( department_id );

CREATE TABLE cause (
    id          NUMBER NOT NULL,
    name        VARCHAR2(128 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

COMMENT ON COLUMN cause.name IS
    'e.g. connection loss, OBU malfunction, incorrect driver action';

ALTER TABLE cause ADD CONSTRAINT cause_pk PRIMARY KEY ( id );

CREATE TABLE change_log (
    id          NUMBER NOT NULL,
    "table"     VARCHAR2(30 CHAR) NOT NULL,
    record_id   NUMBER NOT NULL,
    "column"    VARCHAR2(30 CHAR) NOT NULL,
    old         RAW(1024) NOT NULL,
    new         RAW(1024) NOT NULL,
    change_time DATE DEFAULT sysdate NOT NULL,
    "comment"   VARCHAR2(512 CHAR),
    employee_id NUMBER NOT NULL
);

COMMENT ON TABLE change_log IS
    'Reference integrity between change_log items and refeerenced records in tracked tables in ensured by table level constaints and triggers.'
    ;

COMMENT ON COLUMN change_log.record_id IS
    'id of the altered record';

COMMENT ON COLUMN change_log.old IS
    'raw field content before the change';

COMMENT ON COLUMN change_log.new IS
    'raw field content after the change';

ALTER TABLE change_log ADD CONSTRAINT change_log_pk PRIMARY KEY ( id );

--  Assignement to either an incident or a ticket must be filled in.
CREATE TABLE "comment" (
    id          NUMBER NOT NULL,
    text        VARCHAR2(1024 BYTE),
    attachement BLOB,
    ticket_id   NUMBER,
    incident_id NUMBER,
    employee_id NUMBER NOT NULL
);

ALTER TABLE "comment" ADD CONSTRAINT comment_pk PRIMARY KEY ( id );

CREATE TABLE comment_reference_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE comment_reference_type ADD CONSTRAINT comment_reference_type_pk PRIMARY KEY ( id );

CREATE TABLE comment_relationship (
    id                        NUMBER NOT NULL,
    comment_id                NUMBER NOT NULL,
    comment_id2               NUMBER NOT NULL,
    comment_reference_type_id NUMBER NOT NULL
);

COMMENT ON TABLE comment_relationship IS
    'joins individual comments into responses and other types of relations based on reference_type';

ALTER TABLE comment_relationship ADD CONSTRAINT comment_relationship_pk PRIMARY KEY ( id );

CREATE TABLE contact (
    id          NUMBER NOT NULL,
    email       VARCHAR2(300 CHAR) NOT NULL,
    primary     NUMBER(1) DEFAULT 1 NOT NULL,
    contact_id  VARCHAR2(512 CHAR),
    change_key  VARCHAR2(512 CHAR),
    employee_id NUMBER NOT NULL
);

ALTER TABLE contact ADD CHECK ( email LIKE '%_@%_.__%' );

COMMENT ON TABLE contact IS
    'an employee can have multiple email_addresses, they may be assigned to the same exchane contact
an address can appear with multiple contacts';

COMMENT ON COLUMN contact.email IS
    'check constraint doesn''t competely ensure valid email address, but can catch most obvious violations
if a value has to be inserted that violates the constraint use:
ALTER TABLE employee  DISABLE CONSTRAINT <constraint_name>;
<do the insertion>
ALTER TABLE employee ENABLE NOVALIDATE CONSTRAINT <constraint_name>;';

ALTER TABLE contact ADD CONSTRAINT contact_pk PRIMARY KEY ( id );

CREATE TABLE conversation (
    conversation_id VARCHAR2(512 CHAR) NOT NULL,
    change_key      VARCHAR2(512 CHAR) NOT NULL
);

COMMENT ON TABLE conversation IS
    'used as reference to exchange conversation';

ALTER TABLE conversation ADD CONSTRAINT conversation_pk PRIMARY KEY ( conversation_id,
                                                                      change_key );

CREATE TABLE department (
    id                 NUMBER NOT NULL,
    name               VARCHAR2(128 CHAR),
    default_department NUMBER(1) DEFAULT 1 NOT NULL,
    abbreviation       VARCHAR2(32 CHAR),
    organization_id    NUMBER NOT NULL
);

COMMENT ON COLUMN department.name IS
    'for default department must match the name of the company
ensure by table level constaint';

COMMENT ON COLUMN department.default_department IS
    'when true, the department is only used as a placeholder  in relations requiring department, used with companies whose departments are not stored in database or which dont have any structure, e.g. minor carriers'
    ;

ALTER TABLE department ADD CONSTRAINT department_pk PRIMARY KEY ( id );

CREATE TABLE department_address (
    address_id    NUMBER NOT NULL,
    department_id NUMBER NOT NULL
);

ALTER TABLE department_address ADD CONSTRAINT department_address_pk PRIMARY KEY ( address_id,
                                                                                  department_id );

CREATE TABLE email (
    item_id    VARCHAR2(512 CHAR) NOT NULL,
    change_key VARCHAR2(512 CHAR) NOT NULL
);

COMMENT ON TABLE email IS
    'used as reference to exchange email';

ALTER TABLE email ADD CONSTRAINT email_pk PRIMARY KEY ( item_id,
                                                        change_key );

CREATE TABLE emp_ticket_assigned (
    employee_id NUMBER NOT NULL,
    ticket_id   NUMBER NOT NULL,
    transfered  DATE NOT NULL
);

ALTER TABLE emp_ticket_assigned ADD CONSTRAINT emp_ticket_assigned_pk PRIMARY KEY ( employee_id,
                                                                                    ticket_id );

CREATE TABLE employee (
    id              NUMBER NOT NULL,
    last_name       VARCHAR2(128 CHAR) NOT NULL,
    first_name      VARCHAR2(128 CHAR), 
--  Indicates wheather the "employee" stands for a automatic proces.
    process         NUMBER(1) DEFAULT 0 NOT NULL,
    job_position_id NUMBER NOT NULL,
    department_id   NUMBER NOT NULL
);

COMMENT ON COLUMN employee.process IS
    'indicates wheather the employee stands for an automatic proces, e.g. a script detecting incidents';

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( id );

CREATE TABLE event (
    id            NUMBER NOT NULL,
    "start"       DATE DEFAULT sysdate NOT NULL,
    end           DATE,
    department_id NUMBER NOT NULL,
    employee_id   NUMBER NOT NULL,
    event_type_id NUMBER NOT NULL
);

COMMENT ON TABLE event IS
    'correct sequence of start and end datetimes will be ensured by table leve constraint
start is mandatory, of end is NULL, check must pass';

ALTER TABLE event ADD CONSTRAINT event_pk PRIMARY KEY ( id );

CREATE TABLE event_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(128 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE event_type ADD CONSTRAINT event_type_pk PRIMARY KEY ( id );

CREATE TABLE feature (
    id                   NUMBER NOT NULL,
    name                 VARCHAR2(128 CHAR) NOT NULL,
    milepost             NUMBER(7, 3),
    minepost_approximate NUMBER(1) NOT NULL,
    feature_type_id      NUMBER NOT NULL,
    id2                  NUMBER NOT NULL
);

ALTER TABLE feature ADD CHECK ( milepost >= 0 );

COMMENT ON COLUMN feature.minepost_approximate IS
    'indicates wheather the milepost reference of the feature was manually approximately given, otherwise, it is expected to be from an accurate source, e.g. track description system'
    ;

ALTER TABLE feature ADD CONSTRAINT feature_pk PRIMARY KEY ( id );

CREATE TABLE feature_incident (
    feature_id  NUMBER NOT NULL,
    incident_id NUMBER NOT NULL
);

ALTER TABLE feature_incident ADD CONSTRAINT feature_incident_pk PRIMARY KEY ( feature_id,
                                                                              incident_id );

CREATE TABLE feature_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(128 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE feature_type ADD CONSTRAINT feature_type_pk PRIMARY KEY ( id );

CREATE TABLE inc_type_inc (
    incident_type_id NUMBER NOT NULL,
    incident_id      NUMBER NOT NULL
);

ALTER TABLE inc_type_inc ADD CONSTRAINT inc_type_inc_pk PRIMARY KEY ( incident_type_id,
                                                                      incident_id );

CREATE TABLE incident (
    id NUMBER NOT NULL
);

ALTER TABLE incident ADD CONSTRAINT incident_pk PRIMARY KEY ( id );

CREATE TABLE incident_bg (
    incident_id     NUMBER NOT NULL,
    balise_group_id NUMBER NOT NULL
);

ALTER TABLE incident_bg ADD CONSTRAINT incident_bg_pk PRIMARY KEY ( incident_id,
                                                                    balise_group_id );

CREATE TABLE incident_cause (
    cause_id      NUMBER NOT NULL,
    incident_id   NUMBER NOT NULL,
    primary_cause NUMBER(1) NOT NULL
);

ALTER TABLE incident_cause ADD CONSTRAINT incident_cause_pk PRIMARY KEY ( cause_id,
                                                                          incident_id );

CREATE TABLE incident_event (
    incident_id   NUMBER NOT NULL,
    event_id      NUMBER NOT NULL,
    primary_cause NUMBER(1)
);

ALTER TABLE incident_event ADD CONSTRAINT incident_event_pk PRIMARY KEY ( incident_id,
                                                                          event_id );

CREATE TABLE incident_location (
    incident_id  NUMBER NOT NULL,
    location_id  NUMBER NOT NULL,
    milepost     NUMBER(7, 3) NOT NULL,
    track_number NUMBER(1) NOT NULL
);

ALTER TABLE incident_location ADD CONSTRAINT incident_location_pk PRIMARY KEY ( incident_id,
                                                                                location_id );

CREATE TABLE incident_rbc (
    rbc_id      NUMBER NOT NULL,
    incident_id NUMBER NOT NULL
);

ALTER TABLE incident_rbc ADD CONSTRAINT incident_rbc_pk PRIMARY KEY ( rbc_id,
                                                                      incident_id );

CREATE TABLE incident_reference_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE incident_reference_type ADD CONSTRAINT incident_reference_type_pk PRIMARY KEY ( id );

CREATE TABLE incident_relationship (
    id                         NUMBER NOT NULL,
    incident_id                NUMBER NOT NULL,
    incident_id2               NUMBER NOT NULL,
    incident_reference_type_id NUMBER NOT NULL
);

ALTER TABLE incident_relationship ADD CONSTRAINT incident_relationship_pk PRIMARY KEY ( id );

CREATE TABLE incident_train (
    incident_id     NUMBER NOT NULL,
    train_id        NUMBER NOT NULL,
    influence_start DATE NOT NULL,
    influence_end   DATE NOT NULL
);

ALTER TABLE incident_train ADD CONSTRAINT incident_train_pk PRIMARY KEY ( incident_id,
                                                                          train_id );

CREATE TABLE incident_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE incident_type ADD CONSTRAINT incident_type_pk PRIMARY KEY ( id );

CREATE TABLE job_position (
    id          NUMBER NOT NULL,
    name        VARCHAR2(128 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE job_position ADD CONSTRAINT job_position_pk PRIMARY KEY ( id );

CREATE TABLE kmc (
    id      NUMBER NOT NULL,
    name    VARCHAR2(128 CHAR) NOT NULL,
    etcs_id NUMBER,
    nid_c   NUMBER(4),
    nid_kmc NUMBER
);

ALTER TABLE kmc ADD CHECK ( nid_c BETWEEN 0 AND 1023 );

ALTER TABLE kmc ADD CONSTRAINT kmc_pk PRIMARY KEY ( id );

--  A section of track between two notes ("tarif points").
--  Can also represent station, if 'from' and 'to' atributes are identical.
CREATE TABLE leg (
    location_id          NUMBER NOT NULL,
    number_of_tracks     NUMBER(4) NOT NULL,
    milepost_a           NUMBER(7, 3) NOT NULL,
    milepost_b           NUMBER(7, 3) NOT NULL,
    station_location_id2 NUMBER NOT NULL,
    station_location_id  NUMBER NOT NULL
);

ALTER TABLE leg ADD CHECK ( number_of_tracks >= 0 );

ALTER TABLE leg ADD CONSTRAINT leg_pk PRIMARY KEY ( location_id );

CREATE TABLE line (
    id           NUMBER NOT NULL,
    name         VARCHAR2(6 CHAR) NOT NULL,
    line_type_id NUMBER NOT NULL
);

ALTER TABLE line ADD CONSTRAINT line_pk PRIMARY KEY ( id );

CREATE TABLE line_leg (
    line_id NUMBER NOT NULL,
    leg_id  NUMBER NOT NULL
);

ALTER TABLE line_leg ADD CONSTRAINT line_leg_pk PRIMARY KEY ( line_id,
                                                              leg_id );

CREATE TABLE line_type (
    id         NUMBER NOT NULL,
    name       VARCHAR2(64 CHAR) NOT NULL,
    desription VARCHAR2(256 CHAR)
);

ALTER TABLE line_type ADD CONSTRAINT line_type_pk PRIMARY KEY ( id );

CREATE TABLE location (
    id NUMBER NOT NULL
);

ALTER TABLE location ADD CONSTRAINT location_pk PRIMARY KEY ( id );

CREATE TABLE location_train (
    train_id    NUMBER NOT NULL,
    location_id NUMBER NOT NULL
);

COMMENT ON TABLE location_train IS
    'sequence of locations assigned to a train represents the route of given train';

ALTER TABLE location_train ADD CONSTRAINT location_train_pk PRIMARY KEY ( train_id,
                                                                          location_id );

CREATE TABLE log (
    id       NUMBER NOT NULL,
    filename VARCHAR2(256 CHAR),
    url      VARCHAR2(1024 BYTE),
    "file"   BLOB,
    "start"  DATE NOT NULL,
    end      DATE NOT NULL
);

COMMENT ON TABLE log IS
    'correct sequence of start and end datetimes will be ensured by table level constraint
both are mandatory, can''t be the same

either filename, url or file field must be present, ensure by table level constraint';

ALTER TABLE log ADD CONSTRAINT log_pk PRIMARY KEY ( id );

CREATE TABLE log_incident (
    log_id      NUMBER NOT NULL,
    incident_id NUMBER NOT NULL
);

ALTER TABLE log_incident ADD CONSTRAINT log_incident_pk PRIMARY KEY ( log_id,
                                                                      incident_id );

CREATE TABLE mileage_discontinuity (
    feature_id NUMBER NOT NULL,
    value      NUMBER(7, 3) NOT NULL
);

ALTER TABLE mileage_discontinuity ADD CHECK ( value >= 0 );

ALTER TABLE mileage_discontinuity ADD CONSTRAINT mileage_discontinuity_pk PRIMARY KEY ( feature_id );

CREATE TABLE mounting_system (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE mounting_system ADD CONSTRAINT mounting_system_pk PRIMARY KEY ( id );

CREATE TABLE obu (
    id                           NUMBER NOT NULL,
    nid_engine                   NUMBER(8) NOT NULL,
    system_version               VARCHAR2(7 CHAR),
    srs                          VARCHAR2(32 CHAR),
    supplier_version_designation VARCHAR2(128 CHAR),
    remark                       VARCHAR2(128 CHAR),
    kmc_id                       NUMBER
);

ALTER TABLE obu ADD CHECK ( nid_engine BETWEEN 0 AND 16777215 );

ALTER TABLE obu ADD CONSTRAINT obu_pk PRIMARY KEY ( id );

CREATE TABLE obu_sim (
    sim_id              NUMBER NOT NULL,
    obu_id              NUMBER NOT NULL,
    assigned            DATE,
    unassigned          DATE,
    history_not_tracked NUMBER(1) NOT NULL
);

ALTER TABLE obu_sim ADD CONSTRAINT obu_sim_pk PRIMARY KEY ( sim_id,
                                                            obu_id );

CREATE TABLE obu_vehicle (
    vehicle_id  NUMBER NOT NULL,
    obu_id      NUMBER NOT NULL,
    installed   DATE,
    uninstalled DATE
);

ALTER TABLE obu_vehicle ADD CONSTRAINT obu_vehicle_pk PRIMARY KEY ( vehicle_id,
                                                                    obu_id );

CREATE TABLE organization (
    id              NUMBER NOT NULL,
    name            VARCHAR2(128 CHAR) NOT NULL,
    has_departments NUMBER(1) DEFAULT 0 NOT NULL,
    abbreviation    VARCHAR2(32 CHAR)
);

COMMENT ON COLUMN organization.has_departments IS
    'if false (organization has no departments), there must be exactly one department associated with this organiztion and it must me marked as default department
esure by trigger';

ALTER TABLE organization ADD CONSTRAINT organization_pk PRIMARY KEY ( id );

CREATE TABLE rbc (
    id        NUMBER NOT NULL,
    nid_c     NUMBER(4) NOT NULL,
    nid_rbc   NUMBER(5) NOT NULL,
    nid_radio NUMBER(16) NOT NULL,
    name      VARCHAR2(128 CHAR)
);

ALTER TABLE rbc ADD CHECK ( nid_c BETWEEN 0 AND 1023 );

ALTER TABLE rbc ADD CHECK ( nid_rbc BETWEEN 0 AND 16382 );

ALTER TABLE rbc ADD CHECK ( nid_radio >= 0 );

COMMENT ON COLUMN rbc.nid_rbc IS
    '16383 - contact last known RBC';

ALTER TABLE rbc ADD CONSTRAINT rbc_pk PRIMARY KEY ( id );

CREATE TABLE rbc_bg (
    rbc_id          NUMBER NOT NULL,
    balise_group_id NUMBER NOT NULL
);

ALTER TABLE rbc_bg ADD CONSTRAINT rbc_bg_pk PRIMARY KEY ( rbc_id,
                                                          balise_group_id );

CREATE TABLE rbc_obu (
    obu_id NUMBER NOT NULL,
    rbc_id NUMBER NOT NULL
);

ALTER TABLE rbc_obu ADD CONSTRAINT rbc_obu_pk PRIMARY KEY ( obu_id,
                                                            rbc_id );

CREATE TABLE scr_rec_inc (
    incident_id         NUMBER NOT NULL,
    screen_recording_id NUMBER NOT NULL
);

ALTER TABLE scr_rec_inc ADD CONSTRAINT scr_rec_inc_pk PRIMARY KEY ( incident_id,
                                                                    screen_recording_id );

CREATE TABLE screen_recording (
    id       NUMBER NOT NULL,
    filename VARCHAR2(256 CHAR),
    url      VARCHAR2(1024 BYTE),
    "file"   BLOB,
    "start"  DATE NOT NULL,
    end      DATE NOT NULL
);

COMMENT ON TABLE screen_recording IS
    'correct sequence of start and end datetimes will be ensured by table level constraint
both are mandatory, can''t be the same

either filename, url or file field must be present, ensure by table level constraint';

ALTER TABLE screen_recording ADD CONSTRAINT screen_recording_pk PRIMARY KEY ( id );

CREATE TABLE sim (
    id          NUMBER NOT NULL,
    imsi        NUMBER(15),
    iccid       NUMBER(22),
    msisdn      VARCHAR2(16 CHAR) NOT NULL,
    issued      DATE,
    profile     VARCHAR2(256 CHAR),
    pdp         VARCHAR2(256 CHAR),
    ip          VARCHAR2(39 CHAR),
    radio_type  VARCHAR2(256 CHAR),
    remark      VARCHAR2(256 CHAR),
    employee_id NUMBER
);

ALTER TABLE sim ADD CHECK ( imsi >= 0 );

ALTER TABLE sim ADD CHECK ( iccid >= 0 );

ALTER TABLE sim ADD CONSTRAINT sim_pk PRIMARY KEY ( id );

CREATE TABLE station (
    location_id      NUMBER NOT NULL,
    name             VARCHAR2(35 CHAR) NOT NULL,
    sr70             NUMBER NOT NULL,
    full_name        VARCHAR2(256 CHAR) NOT NULL,
    lon              NUMBER(9) NOT NULL,
    lat              NUMBER(9) NOT NULL,
    milepost         NUMBER(7, 3) NOT NULL,
    station_type_id  NUMBER NOT NULL,
    station_state_id NUMBER NOT NULL
);

ALTER TABLE station
    ADD CHECK ( milepost >= 0
                OR milepost IS NULL );

ALTER TABLE station ADD CONSTRAINT station_pk PRIMARY KEY ( location_id );

CREATE TABLE station_state (
    id   NUMBER NOT NULL,
    name VARCHAR2(32 CHAR) NOT NULL
);

ALTER TABLE station_state ADD CONSTRAINT station_state_pk PRIMARY KEY ( id );

CREATE TABLE station_type (
    id   NUMBER NOT NULL,
    name VARCHAR2(128 CHAR) NOT NULL,
    sr70 NUMBER NOT NULL
);

ALTER TABLE station_type ADD CONSTRAINT station_type_pk PRIMARY KEY ( id );

CREATE TABLE structured_address (
    address_id NUMBER NOT NULL,
    country    VARCHAR2(51 CHAR) NOT NULL,
    city       VARCHAR2(64 CHAR) NOT NULL,
    street     VARCHAR2(64 CHAR) NOT NULL,
    "number"   VARCHAR2(16 CHAR) NOT NULL,
    zip        VARCHAR2(16 CHAR) NOT NULL
);

ALTER TABLE structured_address ADD CHECK ( zip >= 0 );

COMMENT ON TABLE structured_address IS
    'all fields mandatory, use address entity (not structured_address) to store incomplete addresses';

COMMENT ON COLUMN structured_address.country IS
    'max length accoring to Wikipedia list of Czech names for the states of the world';

COMMENT ON COLUMN structured_address.city IS
    'longest name for a Czech city - 32';

COMMENT ON COLUMN structured_address."number" IS
    'can contain letters or slashes';

COMMENT ON COLUMN structured_address.zip IS
    'stored as string - keep reedability, no processig of the data expected';

ALTER TABLE structured_address ADD CONSTRAINT structured_address_pk PRIMARY KEY ( address_id );

CREATE TABLE tckt_conv (
    conversation_conversation_id VARCHAR2(512 CHAR) NOT NULL,
    conversation_change_key      VARCHAR2(512 CHAR) NOT NULL,
    ticket_id                    NUMBER NOT NULL
);

ALTER TABLE tckt_conv
    ADD CONSTRAINT tckt_conv_pk PRIMARY KEY ( conversation_conversation_id,
                                              conversation_change_key,
                                              ticket_id );

CREATE TABLE tckt_tckt_state (
    ticket_id       NUMBER NOT NULL,
    ticket_state_id NUMBER NOT NULL,
    change          DATE NOT NULL,
    changed_by      NUMBER(8) NOT NULL
);

ALTER TABLE tckt_tckt_state ADD CONSTRAINT tckt_tckt_state_pk PRIMARY KEY ( ticket_id,
                                                                            ticket_state_id );

CREATE TABLE telegram (
    id        NUMBER NOT NULL,
    "default" NUMBER(1) DEFAULT 1 NOT NULL,
    user_data VARCHAR2(256 CHAR),
    tlg_url   VARCHAR2(1024 CHAR)
);

COMMENT ON TABLE telegram IS
    'user_data and tlg_url can be empty, if tlegram record is only used to describe a telegram type without the actual data';

COMMENT ON COLUMN telegram."default" IS
    'for fixed balises, the one associated telegram must be marked as default
ensure by trigger';

ALTER TABLE telegram ADD CONSTRAINT telegram_pk PRIMARY KEY ( id );

CREATE TABLE telegram_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE telegram_type ADD CONSTRAINT telegram_type_pk PRIMARY KEY ( id );

CREATE TABLE ticket (
    id              NUMBER NOT NULL,
    opened          DATE DEFAULT sysdate NOT NULL,
    closed          DATE,
    response_needed NUMBER(1) DEFAULT 1 NOT NULL,
    resnponse_sent  DATE,
    employee_id2    NUMBER NOT NULL,
    employee_id     NUMBER
);

COMMENT ON TABLE ticket IS
    'correct sequence of opened, closed and response_sent datetimes will be ensured by table level constraint
opened is mandatory, if others are none, check must pass';

ALTER TABLE ticket ADD CONSTRAINT ticket_pk PRIMARY KEY ( id );

CREATE TABLE ticket_email (
    email_item_id    VARCHAR2(512 CHAR) NOT NULL,
    email_change_key VARCHAR2(512 CHAR) NOT NULL,
    ticket_id        NUMBER NOT NULL,
    response         NUMBER(1) NOT NULL
);

ALTER TABLE ticket_email
    ADD CONSTRAINT ticket_email_pk PRIMARY KEY ( email_item_id,
                                                 email_change_key,
                                                 ticket_id );

CREATE TABLE ticket_incident (
    ticket_id   NUMBER NOT NULL,
    incident_id NUMBER NOT NULL
);

ALTER TABLE ticket_incident ADD CONSTRAINT ticket_incident_pk PRIMARY KEY ( ticket_id,
                                                                            incident_id );

CREATE TABLE ticket_reference_type (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE ticket_reference_type ADD CONSTRAINT ticket_reference_type_pk PRIMARY KEY ( id );

CREATE TABLE ticket_relationship (
    id                       NUMBER NOT NULL,
    ticket_id2               NUMBER NOT NULL,
    ticket_id                NUMBER NOT NULL,
    ticket_reference_type_id NUMBER NOT NULL
);

ALTER TABLE ticket_relationship ADD CONSTRAINT ticket_relationship_pk PRIMARY KEY ( id );

CREATE TABLE ticket_state (
    id          NUMBER NOT NULL,
    name        VARCHAR2(64 CHAR) NOT NULL,
    description VARCHAR2(256 CHAR)
);

ALTER TABLE ticket_state ADD CONSTRAINT ticket_state_pk PRIMARY KEY ( id );

CREATE TABLE tlg_type_tlg (
    telegram_type_id NUMBER NOT NULL,
    telegram_id      NUMBER NOT NULL
);

ALTER TABLE tlg_type_tlg ADD CONSTRAINT tlg_type_tlg_pk PRIMARY KEY ( telegram_type_id,
                                                                      telegram_id );

CREATE TABLE track_number (
    id          NUMBER NOT NULL,
    "number"    VARCHAR2(10 CHAR) NOT NULL,
    location_id NUMBER NOT NULL
);

ALTER TABLE track_number ADD CHECK ( REGEXP_LIKE ( "number",
                                                   '^\d+z?[a-y]{0,2}$' ) );

COMMENT ON COLUMN track_number."number" IS
    'e.g. 5, 109c, 1zb';

ALTER TABLE track_number ADD CONSTRAINT track_number_pk PRIMARY KEY ( id );

CREATE TABLE train (
    id          NUMBER NOT NULL,
    "number"    NUMBER(6) NOT NULL,
    "date"      DATE NOT NULL,
    carrier_id  NUMBER NOT NULL,
    employee_id NUMBER
);

ALTER TABLE train ADD CHECK ( "number" BETWEEN 1 AND 999999 );

ALTER TABLE train ADD CONSTRAINT train_pk PRIMARY KEY ( id );

CREATE TABLE vehicle (
    id  NUMBER NOT NULL,
    uic VARCHAR2(12 BYTE) NOT NULL,
    id2 NUMBER NOT NULL
);

ALTER TABLE vehicle ADD CHECK ( REGEXP_LIKE ( uic,
                                              '^\d{12}$' ) );

COMMENT ON COLUMN vehicle.uic IS
    'check digit stored without a dash
stored as string - expected search based on part of the whole number (e.g. 363012)';

ALTER TABLE vehicle ADD CONSTRAINT vehicle_pk PRIMARY KEY ( id );

CREATE TABLE vehicle_incident (
    vehicle_id  NUMBER NOT NULL,
    incident_id NUMBER NOT NULL
);

ALTER TABLE vehicle_incident ADD CONSTRAINT vehicle_incident_pk PRIMARY KEY ( vehicle_id,
                                                                              incident_id );

CREATE TABLE vehicle_remark (
    id          NUMBER NOT NULL,
    text        VARCHAR2(512 CHAR) NOT NULL,
    added       DATE NOT NULL,
    deleted     DATE,
    employee_id NUMBER NOT NULL,
    vehicle_id  NUMBER NOT NULL
);

COMMENT ON TABLE vehicle_remark IS
    'correct sequence of added  and deleted datetimes will be ensured by table level constraint
deleted is optional, if NULL, constraint must pass';

ALTER TABLE vehicle_remark ADD CONSTRAINT vehicle_remark_pk PRIMARY KEY ( id );

ALTER TABLE balise
    ADD CONSTRAINT balise_balise_group_fk FOREIGN KEY ( balise_group_id )
        REFERENCES balise_group ( id )
            ON DELETE CASCADE;

ALTER TABLE balise
    ADD CONSTRAINT balise_feature_fk FOREIGN KEY ( feature_id )
        REFERENCES feature ( id );

ALTER TABLE balise
    ADD CONSTRAINT balise_mounting_system_fk FOREIGN KEY ( mounting_system_id )
        REFERENCES mounting_system ( id );

ALTER TABLE balise_telegram
    ADD CONSTRAINT balise_telegram_balise_fk FOREIGN KEY ( balise_id3 )
        REFERENCES balise ( feature_id )
            ON DELETE CASCADE;

ALTER TABLE balise_telegram
    ADD CONSTRAINT balise_telegram_telegram_fk FOREIGN KEY ( telegram_id )
        REFERENCES telegram ( id )
            ON DELETE CASCADE;

ALTER TABLE bg_type_bg
    ADD CONSTRAINT bg_type_bg_balise_group_fk FOREIGN KEY ( balise_group_id )
        REFERENCES balise_group ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE bg_type_bg
    ADD CONSTRAINT bg_type_bg_balise_group_type_fk FOREIGN KEY ( balise_group_type_id )
        REFERENCES balise_group_type ( id );

ALTER TABLE carrier
    ADD CONSTRAINT carrier_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( id );

ALTER TABLE change_log
    ADD CONSTRAINT change_log_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE "comment"
    ADD CONSTRAINT comment_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE "comment"
    ADD CONSTRAINT comment_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE comment_relationship
    ADD CONSTRAINT comment_relationship_comment_fk FOREIGN KEY ( comment_id )
        REFERENCES "comment" ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE comment_relationship
    ADD CONSTRAINT comment_relationship_comment_fkv2 FOREIGN KEY ( comment_id2 )
        REFERENCES "comment" ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE comment_relationship
    ADD CONSTRAINT comment_relationship_comment_reference_type_fk FOREIGN KEY ( comment_reference_type_id )
        REFERENCES comment_reference_type ( id );

ALTER TABLE "comment"
    ADD CONSTRAINT comment_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

ALTER TABLE contact
    ADD CONSTRAINT contact_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id )
            ON DELETE CASCADE;

ALTER TABLE department_address
    ADD CONSTRAINT department_address_address_fk FOREIGN KEY ( address_id )
        REFERENCES address ( id )
            ON DELETE CASCADE;

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE department_address
    ADD CONSTRAINT department_address_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( id )
            ON DELETE CASCADE;

ALTER TABLE department
    ADD CONSTRAINT department_organization_fk FOREIGN KEY ( organization_id )
        REFERENCES organization ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE emp_ticket_assigned
    ADD CONSTRAINT emp_ticket_assigned_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE emp_ticket_assigned
    ADD CONSTRAINT emp_ticket_assigned_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

ALTER TABLE employee
    ADD CONSTRAINT employee_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( id );

ALTER TABLE employee
    ADD CONSTRAINT employee_job_position_fk FOREIGN KEY ( job_position_id )
        REFERENCES job_position ( id );

ALTER TABLE event
    ADD CONSTRAINT event_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( id );

ALTER TABLE event
    ADD CONSTRAINT event_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE event
    ADD CONSTRAINT event_event_type_fk FOREIGN KEY ( event_type_id )
        REFERENCES event_type ( id );

ALTER TABLE feature
    ADD CONSTRAINT feature_feature_type_fk FOREIGN KEY ( feature_type_id )
        REFERENCES feature_type ( id );

ALTER TABLE feature_incident
    ADD CONSTRAINT feature_incident_feature_fk FOREIGN KEY ( feature_id )
        REFERENCES feature ( id );

ALTER TABLE feature_incident
    ADD CONSTRAINT feature_incident_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

-- Error - Foreign Key feature_location_FK has no columns

ALTER TABLE inc_type_inc
    ADD CONSTRAINT inc_type_inc_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE inc_type_inc
    ADD CONSTRAINT inc_type_inc_incident_type_fk FOREIGN KEY ( incident_type_id )
        REFERENCES incident_type ( id );

ALTER TABLE incident_bg
    ADD CONSTRAINT incident_bg_balise_group_fk FOREIGN KEY ( balise_group_id )
        REFERENCES balise_group ( id );

ALTER TABLE incident_bg
    ADD CONSTRAINT incident_bg_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_cause
    ADD CONSTRAINT incident_cause_cause_fk FOREIGN KEY ( cause_id )
        REFERENCES cause ( id );

ALTER TABLE incident_cause
    ADD CONSTRAINT incident_cause_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_event
    ADD CONSTRAINT incident_event_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( id );

ALTER TABLE incident_event
    ADD CONSTRAINT incident_event_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_location
    ADD CONSTRAINT incident_location_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_location
    ADD CONSTRAINT incident_location_location_fk FOREIGN KEY ( location_id )
        REFERENCES location ( id );

ALTER TABLE incident_rbc
    ADD CONSTRAINT incident_rbc_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_rbc
    ADD CONSTRAINT incident_rbc_rbc_fk FOREIGN KEY ( rbc_id )
        REFERENCES rbc ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE incident_relationship
    ADD CONSTRAINT incident_relationship_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id )
            ON DELETE CASCADE;

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE incident_relationship
    ADD CONSTRAINT incident_relationship_incident_fkv2 FOREIGN KEY ( incident_id2 )
        REFERENCES incident ( id )
            ON DELETE CASCADE;

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE incident_relationship
    ADD CONSTRAINT incident_relationship_incident_reference_type_fk FOREIGN KEY ( incident_reference_type_id )
        REFERENCES incident_reference_type ( id );

ALTER TABLE incident_train
    ADD CONSTRAINT incident_train_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE incident_train
    ADD CONSTRAINT incident_train_train_fk FOREIGN KEY ( train_id )
        REFERENCES train ( id );

ALTER TABLE leg
    ADD CONSTRAINT leg_location_fk FOREIGN KEY ( location_id )
        REFERENCES location ( id )
            ON DELETE CASCADE;

ALTER TABLE leg
    ADD CONSTRAINT leg_station_fk FOREIGN KEY ( station_location_id )
        REFERENCES station ( location_id )
            ON DELETE CASCADE;

ALTER TABLE leg
    ADD CONSTRAINT leg_station_fkv2 FOREIGN KEY ( station_location_id2 )
        REFERENCES station ( location_id )
            ON DELETE CASCADE;

ALTER TABLE line_leg
    ADD CONSTRAINT line_leg_leg_fk FOREIGN KEY ( leg_id )
        REFERENCES leg ( location_id );

ALTER TABLE line_leg
    ADD CONSTRAINT line_leg_line_fk FOREIGN KEY ( line_id )
        REFERENCES line ( id );

ALTER TABLE line
    ADD CONSTRAINT line_line_type_fk FOREIGN KEY ( line_type_id )
        REFERENCES line_type ( id );

ALTER TABLE location_train
    ADD CONSTRAINT location_train_location_fk FOREIGN KEY ( location_id )
        REFERENCES location ( id );

ALTER TABLE location_train
    ADD CONSTRAINT location_train_train_fk FOREIGN KEY ( train_id )
        REFERENCES train ( id );

ALTER TABLE log_incident
    ADD CONSTRAINT log_incident_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE log_incident
    ADD CONSTRAINT log_incident_log_fk FOREIGN KEY ( log_id )
        REFERENCES log ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE mileage_discontinuity
    ADD CONSTRAINT mileage_discontinuity_feature_fk FOREIGN KEY ( feature_id )
        REFERENCES feature ( id );

ALTER TABLE obu
    ADD CONSTRAINT obu_kmc_fk FOREIGN KEY ( kmc_id )
        REFERENCES kmc ( id );

ALTER TABLE obu_sim
    ADD CONSTRAINT obu_sim_obu_fk FOREIGN KEY ( obu_id )
        REFERENCES obu ( id );

ALTER TABLE obu_sim
    ADD CONSTRAINT obu_sim_sim_fk FOREIGN KEY ( sim_id )
        REFERENCES sim ( id );

ALTER TABLE obu_vehicle
    ADD CONSTRAINT obu_vehicle_obu_fk FOREIGN KEY ( obu_id )
        REFERENCES obu ( id );

ALTER TABLE obu_vehicle
    ADD CONSTRAINT obu_vehicle_vehicle_fk FOREIGN KEY ( vehicle_id )
        REFERENCES vehicle ( id );

ALTER TABLE rbc_bg
    ADD CONSTRAINT rbc_bg_balise_group_fk FOREIGN KEY ( balise_group_id )
        REFERENCES balise_group ( id )
            ON DELETE CASCADE;

ALTER TABLE rbc_bg
    ADD CONSTRAINT rbc_bg_rbc_fk FOREIGN KEY ( rbc_id )
        REFERENCES rbc ( id )
            ON DELETE CASCADE;

ALTER TABLE rbc_obu
    ADD CONSTRAINT rbc_obu_obu_fk FOREIGN KEY ( obu_id )
        REFERENCES obu ( id );

ALTER TABLE rbc_obu
    ADD CONSTRAINT rbc_obu_rbc_fk FOREIGN KEY ( rbc_id )
        REFERENCES rbc ( id );

ALTER TABLE scr_rec_inc
    ADD CONSTRAINT scr_rec_inc_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE scr_rec_inc
    ADD CONSTRAINT scr_rec_inc_screen_recording_fk FOREIGN KEY ( screen_recording_id )
        REFERENCES screen_recording ( id );

ALTER TABLE sim
    ADD CONSTRAINT sim_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE station
    ADD CONSTRAINT station_location_fk FOREIGN KEY ( location_id )
        REFERENCES location ( id )
            ON DELETE CASCADE;

ALTER TABLE station
    ADD CONSTRAINT station_station_state_fk FOREIGN KEY ( station_state_id )
        REFERENCES station_state ( id );

ALTER TABLE station
    ADD CONSTRAINT station_station_type_fk FOREIGN KEY ( station_type_id )
        REFERENCES station_type ( id );

ALTER TABLE structured_address
    ADD CONSTRAINT structured_address_address_fk FOREIGN KEY ( address_id )
        REFERENCES address ( id )
            ON DELETE CASCADE;

ALTER TABLE tckt_conv
    ADD CONSTRAINT tckt_conv_conversation_fk FOREIGN KEY ( conversation_conversation_id,
                                                           conversation_change_key )
        REFERENCES conversation ( conversation_id,
                                  change_key );

ALTER TABLE tckt_conv
    ADD CONSTRAINT tckt_conv_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

ALTER TABLE tckt_tckt_state
    ADD CONSTRAINT tckt_tckt_state_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE tckt_tckt_state
    ADD CONSTRAINT tckt_tckt_state_ticket_state_fk FOREIGN KEY ( ticket_state_id )
        REFERENCES ticket_state ( id );

ALTER TABLE ticket_email
    ADD CONSTRAINT ticket_email_email_fk FOREIGN KEY ( email_item_id,
                                                       email_change_key )
        REFERENCES email ( item_id,
                           change_key );

ALTER TABLE ticket_email
    ADD CONSTRAINT ticket_email_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

ALTER TABLE ticket
    ADD CONSTRAINT ticket_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE ticket
    ADD CONSTRAINT ticket_employee_fkv2 FOREIGN KEY ( employee_id2 )
        REFERENCES employee ( id );

ALTER TABLE ticket_incident
    ADD CONSTRAINT ticket_incident_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE ticket_incident
    ADD CONSTRAINT ticket_incident_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id );

ALTER TABLE ticket_relationship
    ADD CONSTRAINT ticket_relationship_ticket_fk FOREIGN KEY ( ticket_id )
        REFERENCES ticket ( id )
            ON DELETE CASCADE;

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE ticket_relationship
    ADD CONSTRAINT ticket_relationship_ticket_fkv2 FOREIGN KEY ( ticket_id2 )
        REFERENCES ticket ( id )
            ON DELETE CASCADE;

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE ticket_relationship
    ADD CONSTRAINT ticket_relationship_ticket_reference_type_fk FOREIGN KEY ( ticket_reference_type_id )
        REFERENCES ticket_reference_type ( id );

ALTER TABLE tlg_type_tlg
    ADD CONSTRAINT tlg_type_tlg_telegram_fk FOREIGN KEY ( telegram_id )
        REFERENCES telegram ( id );

ALTER TABLE tlg_type_tlg
    ADD CONSTRAINT tlg_type_tlg_telegram_type_fk FOREIGN KEY ( telegram_type_id )
        REFERENCES telegram_type ( id );

ALTER TABLE track_number
    ADD CONSTRAINT track_number_location_fk FOREIGN KEY ( location_id )
        REFERENCES location ( id )
            ON DELETE CASCADE;

ALTER TABLE train
    ADD CONSTRAINT train_carrier_fk FOREIGN KEY ( carrier_id )
        REFERENCES carrier ( department_id );

ALTER TABLE train
    ADD CONSTRAINT train_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id )
            ON DELETE SET NULL;

-- Error - Foreign Key vehicle_carrier_FK has no columns

ALTER TABLE vehicle_incident
    ADD CONSTRAINT vehicle_incident_incident_fk FOREIGN KEY ( incident_id )
        REFERENCES incident ( id );

ALTER TABLE vehicle_incident
    ADD CONSTRAINT vehicle_incident_vehicle_fk FOREIGN KEY ( vehicle_id )
        REFERENCES vehicle ( id );

ALTER TABLE vehicle_remark
    ADD CONSTRAINT vehicle_remark_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( id );

ALTER TABLE vehicle_remark
    ADD CONSTRAINT vehicle_remark_vehicle_fk FOREIGN KEY ( vehicle_id )
        REFERENCES vehicle ( id );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            77
-- CREATE INDEX                             0
-- ALTER TABLE                            193
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                  16
-- WARNINGS                                 0
